{
  "address": "0xcf0a610e868ce7d6e3c7052da16315674097f6ed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialPrefix",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "dayTimeInSeconds",
          "type": "uint24"
        }
      ],
      "name": "MessageChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lastGreetingOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "greeting",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "messages",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "dayTimeInSeconds",
              "type": "uint24"
            }
          ],
          "internalType": "struct GreetingsRegistry.Message",
          "name": "userMsg",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialPrefix",
          "type": "string"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "dayTimeInSeconds",
          "type": "uint24"
        }
      ],
      "name": "setMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "dayTimeInSeconds",
          "type": "uint24"
        }
      ],
      "name": "setMessageFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "GreetingsRegistry",
  "sourceName": "src/GreetingsRegistry.sol",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000ee838038062000ee88339810160408190526200003491620000cf565b6200003f8162000046565b50620002fe565b60006200006060008051602062000ec88339815191525490565b90506001600160a01b03811662000090576001600160a01b0360008051602062000ec883398151915255620000a6565b336001600160a01b03821614620000a657600080fd5b6001620000b4838262000232565b505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620000e357600080fd5b82516001600160401b0380821115620000fb57600080fd5b818501915085601f8301126200011057600080fd5b815181811115620001255762000125620000b9565b604051601f8201601f19908116603f01168101908382118183101715620001505762000150620000b9565b8160405282815288868487010111156200016957600080fd5b600093505b828410156200018d57848401860151818501870152928501926200016e565b600086848301015280965050505050505092915050565b600181811c90821680620001b957607f821691505b602082108103620001da57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620000b457600081815260208120601f850160051c81016020861015620002095750805b601f850160051c820191505b818110156200022a5782815560010162000215565b505050505050565b81516001600160401b038111156200024e576200024e620000b9565b62000266816200025f8454620001a4565b84620001e0565b602080601f8311600181146200029e5760008415620002855750858301515b600019600386901b1c1916600185901b1785556200022a565b600085815260208120601f198616915b82811015620002cf57888601518255948401946001909101908401620002ae565b5085821015620002ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610bba806200030e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80635fdd59f8116100505780635fdd59f8146100c857806375dadb32146100e8578063b1441ce6146100f057600080fd5b806303433b8e14610077578063334c9bba146100a05780634c2dd808146100b5575b600080fd5b61008a61008536600461060e565b610103565b6040516100979190610694565b60405180910390f35b6100b36100ae366004610703565b6101bc565b005b6100b36100c3366004610768565b610251565b6100db6100d636600461060e565b610262565b60405161009791906107bc565b61008a61036c565b6100b36100fe36600461082c565b6103fe565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020805460609190610137906108fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610163906108fb565b80156101b05780601f10610185576101008083540402835291602001916101b0565b820191906000526020600020905b81548152906001019060200180831161019357829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff85161461023f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640160405180910390fd5b61024b848484846104af565b50505050565b61025d338484846104af565b505050565b61028b60405180606001604052806060815260200160008152602001600062ffffff1681525090565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040908190208151606081019092528054829082906102ca906108fb565b80601f01602080910402602001604051908101604052809291908181526020018280546102f6906108fb565b80156103435780601f1061031857610100808354040283529160200191610343565b820191906000526020600020905b81548152906001019060200180831161032657829003601f168201915b50505091835250506001820154602082015260029091015462ffffff1660409091015292915050565b60606001805461037b906108fb565b80601f01602080910402602001604051908101604052809291908181526020018280546103a7906108fb565b80156103f45780601f106103c9576101008083540402835291602001916103f4565b820191906000526020600020905b8154815290600101906020018083116103d757829003601f168201915b5050505050905090565b60006104287fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166104815773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556104a3565b3373ffffffffffffffffffffffffffffffffffffffff8216146104a357600080fd5b600161025d838261099c565b6000600184846040516020016104c793929190610ab6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526060830182528083524260208481019190915262ffffff86168484015273ffffffffffffffffffffffffffffffffffffffff8916600090815290819052919091208251919350908190610545908261099c565b5060208201516001820155604091820151600290910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000001662ffffff9092169190911790555173ffffffffffffffffffffffffffffffffffffffff8616907f4650083cdd22f274f233c0ae8b1e5a23037ced29923011d703349cdeeface1af906105d690429085908790610b56565b60405180910390a25050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461060957600080fd5b919050565b60006020828403121561062057600080fd5b610629826105e5565b9392505050565b6000815180845260005b818110156106565760208185018101518683018201520161063a565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006106296020830184610630565b60008083601f8401126106b957600080fd5b50813567ffffffffffffffff8111156106d157600080fd5b6020830191508360208285010111156106e957600080fd5b9250929050565b803562ffffff8116811461060957600080fd5b6000806000806060858703121561071957600080fd5b610722856105e5565b9350602085013567ffffffffffffffff81111561073e57600080fd5b61074a878288016106a7565b909450925061075d9050604086016106f0565b905092959194509250565b60008060006040848603121561077d57600080fd5b833567ffffffffffffffff81111561079457600080fd5b6107a0868287016106a7565b90945092506107b39050602085016106f0565b90509250925092565b6020815260008251606060208401526107d86080840182610630565b90506020840151604084015262ffffff60408501511660608401528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561083e57600080fd5b813567ffffffffffffffff8082111561085657600080fd5b818401915084601f83011261086a57600080fd5b81358181111561087c5761087c6107fd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156108c2576108c26107fd565b816040528281528760208487010111156108db57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061090f57607f821691505b602082108103610948577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561025d57600081815260208120601f850160051c810160208610156109755750805b601f850160051c820191505b8181101561099457828155600101610981565b505050505050565b815167ffffffffffffffff8111156109b6576109b66107fd565b6109ca816109c484546108fb565b8461094e565b602080601f831160018114610a1d57600084156109e75750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610994565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610a6a57888601518255948401946001909101908401610a4b565b5085821015610aa657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000808554610ac4816108fb565b60018281168015610adc5760018114610b0f57610b3e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450610b3e565b8960005260208060002060005b85811015610b355781548a820152908401908201610b1c565b50505082870194505b50505050838582376000930192835250909392505050565b838152606060208201526000610b6f6060830185610630565b905062ffffff8316604083015294935050505056fea26469706673582212201122c1083ecb0908091d5aac236589873997b3c85d7ac10f1261837f8bbd484164736f6c63430008140033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80635fdd59f8116100505780635fdd59f8146100c857806375dadb32146100e8578063b1441ce6146100f057600080fd5b806303433b8e14610077578063334c9bba146100a05780634c2dd808146100b5575b600080fd5b61008a61008536600461060e565b610103565b6040516100979190610694565b60405180910390f35b6100b36100ae366004610703565b6101bc565b005b6100b36100c3366004610768565b610251565b6100db6100d636600461060e565b610262565b60405161009791906107bc565b61008a61036c565b6100b36100fe36600461082c565b6103fe565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020805460609190610137906108fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610163906108fb565b80156101b05780601f10610185576101008083540402835291602001916101b0565b820191906000526020600020905b81548152906001019060200180831161019357829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff85161461023f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640160405180910390fd5b61024b848484846104af565b50505050565b61025d338484846104af565b505050565b61028b60405180606001604052806060815260200160008152602001600062ffffff1681525090565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040908190208151606081019092528054829082906102ca906108fb565b80601f01602080910402602001604051908101604052809291908181526020018280546102f6906108fb565b80156103435780601f1061031857610100808354040283529160200191610343565b820191906000526020600020905b81548152906001019060200180831161032657829003601f168201915b50505091835250506001820154602082015260029091015462ffffff1660409091015292915050565b60606001805461037b906108fb565b80601f01602080910402602001604051908101604052809291908181526020018280546103a7906108fb565b80156103f45780601f106103c9576101008083540402835291602001916103f4565b820191906000526020600020905b8154815290600101906020018083116103d757829003601f168201915b5050505050905090565b60006104287fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166104815773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556104a3565b3373ffffffffffffffffffffffffffffffffffffffff8216146104a357600080fd5b600161025d838261099c565b6000600184846040516020016104c793929190610ab6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526060830182528083524260208481019190915262ffffff86168484015273ffffffffffffffffffffffffffffffffffffffff8916600090815290819052919091208251919350908190610545908261099c565b5060208201516001820155604091820151600290910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000001662ffffff9092169190911790555173ffffffffffffffffffffffffffffffffffffffff8616907f4650083cdd22f274f233c0ae8b1e5a23037ced29923011d703349cdeeface1af906105d690429085908790610b56565b60405180910390a25050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461060957600080fd5b919050565b60006020828403121561062057600080fd5b610629826105e5565b9392505050565b6000815180845260005b818110156106565760208185018101518683018201520161063a565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006106296020830184610630565b60008083601f8401126106b957600080fd5b50813567ffffffffffffffff8111156106d157600080fd5b6020830191508360208285010111156106e957600080fd5b9250929050565b803562ffffff8116811461060957600080fd5b6000806000806060858703121561071957600080fd5b610722856105e5565b9350602085013567ffffffffffffffff81111561073e57600080fd5b61074a878288016106a7565b909450925061075d9050604086016106f0565b905092959194509250565b60008060006040848603121561077d57600080fd5b833567ffffffffffffffff81111561079457600080fd5b6107a0868287016106a7565b90945092506107b39050602085016106f0565b90509250925092565b6020815260008251606060208401526107d86080840182610630565b90506020840151604084015262ffffff60408501511660608401528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561083e57600080fd5b813567ffffffffffffffff8082111561085657600080fd5b818401915084601f83011261086a57600080fd5b81358181111561087c5761087c6107fd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156108c2576108c26107fd565b816040528281528760208487010111156108db57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061090f57607f821691505b602082108103610948577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561025d57600081815260208120601f850160051c810160208610156109755750805b601f850160051c820191505b8181101561099457828155600101610981565b505050505050565b815167ffffffffffffffff8111156109b6576109b66107fd565b6109ca816109c484546108fb565b8461094e565b602080601f831160018114610a1d57600084156109e75750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610994565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610a6a57888601518255948401946001909101908401610a4b565b5085821015610aa657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000808554610ac4816108fb565b60018281168015610adc5760018114610b0f57610b3e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450610b3e565b8960005260208060002060005b85811015610b355781548a820152908401908201610b1c565b50505082870194505b50505050838582376000930192835250909392505050565b838152606060208201526000610b6f6060830185610630565b905062ffffff8316604083015294935050505056fea26469706673582212201122c1083ecb0908091d5aac236589873997b3c85d7ac10f1261837f8bbd484164736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "events": {
      "MessageChanged(address,uint256,string,uint24)": {
        "details": "the timestamp is included to speedup indexing see: https://ethereum-magicians.org/t/proposal-for-adding-blocktimestamp-to-logs-object-returned-by-eth-getlogs-and-related-requests/11183",
        "params": {
          "dayTimeInSeconds": "the time of the day in seconds where 00:00 => 0 and 23:59 => 82859",
          "message": "the message content",
          "timestamp": "the time at which the message was recorded",
          "user": "the user that send the message"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "constructors",
        "params": {
          "initialPrefix": "the prefix that will be prepended to every user message goig forward"
        }
      },
      "lastGreetingOf(address)": {
        "params": {
          "user": "address of the user."
        },
        "returns": {
          "greeting": "the message's content send by the user."
        }
      },
      "messages(address)": {
        "params": {
          "user": "address of the user."
        },
        "returns": {
          "userMsg": "the message send by the user."
        }
      },
      "postUpgrade(string)": {
        "details": "called by the admin when the contract is deployed as a proxy",
        "params": {
          "initialPrefix": "the prefix that will be prepended to every user message goig forward"
        }
      },
      "prefix()": {
        "returns": {
          "value": "prefix string."
        }
      },
      "setMessage(string,uint24)": {
        "params": {
          "dayTimeInSeconds": "the time of the day in seconds the message was written.",
          "message": "the value to set as content."
        }
      },
      "setMessageFor(address,string,uint24)": {
        "params": {
          "account": "address which will have its greetings set",
          "dayTimeInSeconds": "the time of the day in seconds the message was written.",
          "message": "the value to set as content."
        }
      }
    },
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "600400",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "lastGreetingOf(address)": "infinite",
        "messages(address)": "infinite",
        "postUpgrade(string)": "infinite",
        "prefix()": "infinite",
        "setMessage(string,uint24)": "infinite",
        "setMessageFor(address,string,uint24)": "infinite"
      },
      "internal": {
        "_setMessageFor(address,string calldata,uint24)": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialPrefix\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dayTimeInSeconds\",\"type\":\"uint24\"}],\"name\":\"MessageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lastGreetingOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"greeting\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"messages\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"dayTimeInSeconds\",\"type\":\"uint24\"}],\"internalType\":\"struct GreetingsRegistry.Message\",\"name\":\"userMsg\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialPrefix\",\"type\":\"string\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"dayTimeInSeconds\",\"type\":\"uint24\"}],\"name\":\"setMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"dayTimeInSeconds\",\"type\":\"uint24\"}],\"name\":\"setMessageFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MessageChanged(address,uint256,string,uint24)\":{\"details\":\"the timestamp is included to speedup indexing see: https://ethereum-magicians.org/t/proposal-for-adding-blocktimestamp-to-logs-object-returned-by-eth-getlogs-and-related-requests/11183\",\"params\":{\"dayTimeInSeconds\":\"the time of the day in seconds where 00:00 => 0 and 23:59 => 82859\",\"message\":\"the message content\",\"timestamp\":\"the time at which the message was recorded\",\"user\":\"the user that send the message\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"constructors\",\"params\":{\"initialPrefix\":\"the prefix that will be prepended to every user message goig forward\"}},\"lastGreetingOf(address)\":{\"params\":{\"user\":\"address of the user.\"},\"returns\":{\"greeting\":\"the message's content send by the user.\"}},\"messages(address)\":{\"params\":{\"user\":\"address of the user.\"},\"returns\":{\"userMsg\":\"the message send by the user.\"}},\"postUpgrade(string)\":{\"details\":\"called by the admin when the contract is deployed as a proxy\",\"params\":{\"initialPrefix\":\"the prefix that will be prepended to every user message goig forward\"}},\"prefix()\":{\"returns\":{\"value\":\"prefix string.\"}},\"setMessage(string,uint24)\":{\"params\":{\"dayTimeInSeconds\":\"the time of the day in seconds the message was written.\",\"message\":\"the value to set as content.\"}},\"setMessageFor(address,string,uint24)\":{\"params\":{\"account\":\"address which will have its greetings set\",\"dayTimeInSeconds\":\"the time of the day in seconds the message was written.\",\"message\":\"the value to set as content.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"MessageChanged(address,uint256,string,uint24)\":{\"notice\":\"emitted whenever a user set a new greeting to the world\"}},\"kind\":\"user\",\"methods\":{\"lastGreetingOf(address)\":{\"notice\":\"return the last greeting message from the given `user`.\"},\"messages(address)\":{\"notice\":\"return the last message from the given `user`.\"},\"prefix()\":{\"notice\":\"return the prefix that is appended to any new message.\"},\"setMessage(string,uint24)\":{\"notice\":\"set a new message for `msg.sender`.\"},\"setMessageFor(address,string,uint24)\":{\"notice\":\"set a new message for `msg.sender`.\"}},\"notice\":\"a registry that let user send greetings to the world  It is used as a demo for jolly-roger,  a fully featured SDK to build entirely decentralised apps and games  It is inteded to be deployed via upgradeable proxy locally  to showcase the HCR (Hot Contract Replacement) capabilities of `hardhat-deploy`  but immutable on live networks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/GreetingsRegistry.sol\":\"GreetingsRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"solidity-proxy/solc_0.8/EIP1967/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/GreetingsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"solidity-proxy/solc_0.8/EIP1967/Proxied.sol\\\";\\n\\n/// @notice a registry that let user send greetings to the world\\n///  It is used as a demo for jolly-roger,\\n///  a fully featured SDK to build entirely decentralised apps and games\\n///  It is inteded to be deployed via upgradeable proxy locally\\n///  to showcase the HCR (Hot Contract Replacement) capabilities of `hardhat-deploy`\\n///  but immutable on live networks.\\ncontract GreetingsRegistry is Proxied {\\n    // ----------------------------------------------------------------------------------------------\\n    // EVENTS\\n    // ----------------------------------------------------------------------------------------------\\n    /// @notice emitted whenever a user set a new greeting to the world\\n    /// @param user the user that send the message\\n    /// @param timestamp the time at which the message was recorded\\n    /// @param message the message content\\n    /// @param dayTimeInSeconds the time of the day in seconds where 00:00 => 0 and 23:59 => 82859\\n    /// @dev the timestamp is included to speedup indexing\\n    /// see: https://ethereum-magicians.org/t/proposal-for-adding-blocktimestamp-to-logs-object-returned-by-eth-getlogs-and-related-requests/11183\\n    event MessageChanged(address indexed user, uint256 timestamp, string message, uint24 dayTimeInSeconds);\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // TYPES\\n    // ----------------------------------------------------------------------------------------------\\n    struct Message {\\n        string content;\\n        uint256 timestamp;\\n        uint24 dayTimeInSeconds;\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // STORAGE\\n    // ----------------------------------------------------------------------------------------------\\n    mapping(address => Message) internal _messages;\\n    string internal _prefix;\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // CONSTRUCTOR / INITIALIZER\\n    // ----------------------------------------------------------------------------------------------\\n\\n    /// @dev constructors\\n    /// @param initialPrefix the prefix that will be prepended to every user message goig forward\\n    constructor(string memory initialPrefix) {\\n        // the proxied modifier from `hardhat-deploy` (see `postUpgrade` function)\\n        //  ensure postUpgrade effect can only be used once when the contract is deployed without proxy.\\n        //  by calling that function in the constructor\\n        //  we ensure the contract behave the same whether it is deployed through a proxy or not.\\n        //  when the contract is deployed without proxy, the postUpgrade can never be called\\n        postUpgrade(initialPrefix);\\n    }\\n\\n    //\\n    /// @dev called by the admin when the contract is deployed as a proxy\\n    /// @param initialPrefix the prefix that will be prepended to every user message goig forward\\n    function postUpgrade(string memory initialPrefix) public proxied {\\n        _prefix = initialPrefix;\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // PUBLIC INTERFACE\\n    // ----------------------------------------------------------------------------------------------\\n\\n    /// @notice return the last message from the given `user`.\\n    /// @param user address of the user.\\n    /// @return userMsg the message send by the user.\\n    function messages(address user) external view returns (Message memory userMsg) {\\n        userMsg = _messages[user];\\n    }\\n\\n    /// @notice return the last greeting message from the given `user`.\\n    /// @param user address of the user.\\n    /// @return greeting the message's content send by the user.\\n    function lastGreetingOf(address user) external view returns (string memory greeting) {\\n        greeting = _messages[user].content;\\n    }\\n\\n    /// @notice return the prefix that is appended to any new message.\\n    /// @return value prefix string.\\n    function prefix() external view returns (string memory value) {\\n        return _prefix;\\n    }\\n\\n    /// @notice set a new message for `msg.sender`.\\n    /// @param message the value to set as content.\\n    /// @param dayTimeInSeconds the time of the day in seconds the message was written.\\n    function setMessage(string calldata message, uint24 dayTimeInSeconds) external {\\n        _setMessageFor(msg.sender, message, dayTimeInSeconds);\\n    }\\n\\n    /// @notice set a new message for `msg.sender`.\\n    /// @param account address which will have its greetings set\\n    /// @param message the value to set as content.\\n    /// @param dayTimeInSeconds the time of the day in seconds the message was written.\\n    function setMessageFor(address account, string calldata message, uint24 dayTimeInSeconds) external {\\n        // we could add delegation here\\n        // we added this function to showcase test expecting errors\\n        require(msg.sender == account, \\\"NOT_AUTHORIZED\\\");\\n        _setMessageFor(account, message, dayTimeInSeconds);\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // ----------------------------------------------------------------------------------------------\\n\\n    function _setMessageFor(address account, string calldata message, uint24 dayTimeInSeconds) internal {\\n        string memory actualMessage = string(bytes.concat(bytes(_prefix), bytes(message)));\\n        _messages[account] = Message({\\n            content: actualMessage,\\n            timestamp: block.timestamp,\\n            dayTimeInSeconds: dayTimeInSeconds\\n        });\\n        emit MessageChanged(account, block.timestamp, actualMessage, dayTimeInSeconds);\\n    }\\n}\\n\",\"keccak256\":\"0xcc842471d99e9c5328176a18e81ec3519ba85aecacb97226fae5be21e7c7b518\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 78,
        "contract": "src/GreetingsRegistry.sol:GreetingsRegistry",
        "label": "_messages",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Message)73_storage)"
      },
      {
        "astId": 80,
        "contract": "src/GreetingsRegistry.sol:GreetingsRegistry",
        "label": "_prefix",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Message)73_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GreetingsRegistry.Message)",
        "numberOfBytes": "32",
        "value": "t_struct(Message)73_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Message)73_storage": {
        "encoding": "inplace",
        "label": "struct GreetingsRegistry.Message",
        "members": [
          {
            "astId": 68,
            "contract": "src/GreetingsRegistry.sol:GreetingsRegistry",
            "label": "content",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 70,
            "contract": "src/GreetingsRegistry.sol:GreetingsRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 72,
            "contract": "src/GreetingsRegistry.sol:GreetingsRegistry",
            "label": "dayTimeInSeconds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "events": {
      "MessageChanged(address,uint256,string,uint24)": {
        "notice": "emitted whenever a user set a new greeting to the world"
      }
    },
    "kind": "user",
    "methods": {
      "lastGreetingOf(address)": {
        "notice": "return the last greeting message from the given `user`."
      },
      "messages(address)": {
        "notice": "return the last message from the given `user`."
      },
      "prefix()": {
        "notice": "return the prefix that is appended to any new message."
      },
      "setMessage(string,uint24)": {
        "notice": "set a new message for `msg.sender`."
      },
      "setMessageFor(address,string,uint24)": {
        "notice": "set a new message for `msg.sender`."
      }
    },
    "notice": "a registry that let user send greetings to the world  It is used as a demo for jolly-roger,  a fully featured SDK to build entirely decentralised apps and games  It is inteded to be deployed via upgradeable proxy locally  to showcase the HCR (Hot Contract Replacement) capabilities of `hardhat-deploy`  but immutable on live networks.",
    "version": 1
  },
  "argsData": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
  "transaction": {
    "hash": "0x3a2d10050a45f5515a0ab03956d9e79d78b42e704de851799b1c554dcc4e1629",
    "nonce": "0xcb",
    "origin": "0x61c461ecc993aadeb7e4b47e96d1b8cc37314b20"
  },
  "receipt": {
    "confirmations": 0,
    "blockHash": "0xdae60eb46f7341075e118fd22de04365829d189eb8904feb29b51aba2b8a8850",
    "blockNumber": "0x475fe8",
    "transactionIndex": "0x30"
  }
}